package yaprnn.gui;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.util.EventObject;
import java.util.Vector;
import javax.swing.CellEditor;
import javax.swing.JComboBox;
import javax.swing.event.CellEditorListener;
import javax.swing.event.ChangeEvent;

class ActivationFunctionEditor extends JComboBox implements CellEditor {

	/**
	 * Autogenerated serialization ID
	 */
	private static final long serialVersionUID = -5652112631704780039L;

	private String value;
	private Vector<CellEditorListener> listeners = new Vector<CellEditorListener>();

	// Mimic all the constructors people expect with ComboBoxes.
	public ActivationFunctionEditor(Object[] list) {
		super(list);
		setEditable(false);
		value = list[0].toString();

		// Listen to our own action events so that we know when to stop
		// editing.
		addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent ae) {
				if (stopCellEditing()) {
					fireEditingStopped();
				}
			}
		});
	}

	@Override
	public void cancelCellEditing() {
	}

	@Override
	public boolean stopCellEditing() {
		// Stop editing only if the user entered a valid value.
		try {
			value = (String) getSelectedItem();
			if (value == null) {
				value = (String) getItemAt(0);
			}
			return true;
		} catch (Exception e) {
			// Something went wrong.
			return false;
		}
	}

	@Override
	public Object getCellEditorValue() {
		return value;
	}

	@Override
	public boolean isCellEditable(EventObject eo) {
		// Start editing when the right mouse button is clicked.
		if (eo instanceof MouseEvent)
			if (((MouseEvent) eo).isMetaDown())
				return true;
		return false;
	}

	@Override
	public boolean shouldSelectCell(EventObject eo) {
		return true;
	}

	@Override
	public void addCellEditorListener(CellEditorListener cel) {
		listeners.addElement(cel);
	}

	@Override
	public void removeCellEditorListener(CellEditorListener cel) {
		listeners.removeElement(cel);
	}

	protected void fireEditingStopped() {
		if (listeners.size() > 0) {
			ChangeEvent ce = new ChangeEvent(this);
			for (CellEditorListener l : listeners)
				l.editingStopped(ce);
		}
	}

}
